[{"C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\index.js":"1","C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\App.js":"2","C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\Map.js":"3","C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\BarChart.js":"4","C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\PieChart.js":"5"},{"size":251,"mtime":1626874925366,"results":"6","hashOfConfig":"7"},{"size":7939,"mtime":1628758280810,"results":"8","hashOfConfig":"7"},{"size":3738,"mtime":1628758997695,"results":"9","hashOfConfig":"7"},{"size":3728,"mtime":1628757099346,"results":"10","hashOfConfig":"7"},{"size":4302,"mtime":1628757171584,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17f79lg",{"filePath":"14","messages":"15","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\index.js",[],"C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\App.js",["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39"],"import React, { useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport Map from \"./Map\";\nimport BarChart from \"./BarChart\";\nimport PieChart from \"./PieChart\";\nimport { BeatLoader } from \"react-spinners\";\n\n// Tulikartta API\nconst API_URL = \"https://tulikartta.fi/api-json2.php\";\n\nfunction App() {\n  const [paikat, setPaikat] = useState([]);\n  const [maakunnat, setMaakunnat] = useState([]);\n  const [tyypit, setTyypit] = useState([]);\n  const [valittuMaakunta, setValittuMaakunta] = useState(\"\");\n  const [valittuTyyppi, setValittuTyyppi] = useState(\"\");\n  const [rajatutPaikat, setRajatutPaikat] = useState([]);\n  const [paikatMaakunnassa, setPaikatMaakunnassa] = useState([]);\n  const [newLat, setNewLat] = useState();\n  const [newLong, setNewLong] = useState();\n  const [toggleMaakunnatClick, setToggleMaakunnatClick] = useState(false);\n  const [toggleTyypitClick, setToggleTyypitClick] = useState(false);\n  const [chartData, setChartData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Maakunnat -valikon dropdown animaatio\n  const maakunnatFade = useSpring({\n    position: \"absolute\",\n    border: toggleMaakunnatClick ? 1 : 0,\n    height: toggleMaakunnatClick ? 100 : 0,\n    width: 200,\n  });\n\n  // Tyypit -valikon dropdown animaatio\n  const tyypitFade = useSpring({\n    position: \"absolute\",\n    border: toggleTyypitClick ? 1 : 0,\n    height: toggleTyypitClick ? 100 : 0,\n    width: 200,\n  });\n\n  // Sivun latautuessa haetaan data\n  useEffect(() => {\n    fetch(API_URL, {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    })\n      .then((response) => {\n        console.log(response);\n        return response.json();\n      })\n      .then((jsonData) => {\n        const paikatArr = [...jsonData];\n        const maakunnatArr = [];\n        const tyypitArr = [];\n\n        tyypitArr.push(\"Näytä kaikki\");\n\n        for (let i of paikatArr) {\n          maakunnatArr.push(i.maakunta);\n          tyypitArr.push(i.tyyppi);\n        }\n        const maakunnatRemoveDuplicates = [...new Set(maakunnatArr)];\n        const tyypitRemoveDublicates = [...new Set(tyypitArr)];\n\n        setPaikat([...jsonData]);\n        setMaakunnat([...maakunnatRemoveDuplicates]);\n        setTyypit([...tyypitRemoveDublicates]);\n        setIsLoading(false);\n      });\n  }, []);\n\n  // Päivitetään paikat valitussa maakunnassa kun valitaan maakunta\n  useEffect(() => {\n    paivitaPaikatMaakunnassa();\n    paivitaChartData();\n    return () => {};\n  }, [valittuMaakunta]);\n\n  // Päivitetään kaikki paikat kun valitaan tyyppi\n  useEffect(() => {\n    paivitaPaikat();\n  }, [valittuTyyppi]);\n\n  // Päivittää kaavioille lähetettävän datan\n  const paivitaChartData = () => {\n    const chartDataArr = paikat.filter(\n      (paikka) => paikka.maakunta == valittuMaakunta\n    );\n\n    setChartData([chartDataArr]);\n  };\n\n  // Päivittää paikat valitussa maakunnassa\n  const paivitaPaikatMaakunnassa = () => {\n    let paikatMaakunnassaArr = [];\n\n    if (valittuTyyppi == \"Näytä kaikki\" || valittuTyyppi == \"\") {\n      paikatMaakunnassaArr = paikat.filter(\n        (paikka) => paikka.maakunta == valittuMaakunta\n      );\n      setChartData([paikatMaakunnassaArr]);\n    } else {\n      paikatMaakunnassaArr = paikat.filter(\n        (paikka) =>\n          paikka.maakunta == valittuMaakunta && paikka.tyyppi == valittuTyyppi\n      );\n    }\n    setPaikatMaakunnassa([paikatMaakunnassaArr]);\n    setRajatutPaikat([paikatMaakunnassaArr]);\n\n    if (valittuMaakunta != \"\" && paikatMaakunnassaArr[0]) {\n      const splitKoordinaatit = paikatMaakunnassaArr[0].koordinaatti.split(\",\");\n      setNewLat(splitKoordinaatit[0]);\n      setNewLong(splitKoordinaatit[1]);\n    }\n  };\n\n  // Päivittää kaikki paikat valitun maakunnan ja tyypin mukaan\n  const paivitaPaikat = () => {\n    if (valittuMaakunta != \"\" && valittuTyyppi != \"Näytä kaikki\") {\n      let rajatutPaikat = [];\n      async function f() {\n        {\n          rajatutPaikat = paikat.filter(\n            (paikka) =>\n              paikka.maakunta == valittuMaakunta &&\n              paikka.tyyppi == valittuTyyppi\n          );\n        }\n      }\n      f().then(() => setRajatutPaikat([rajatutPaikat]));\n    } else if (valittuTyyppi == \"Näytä kaikki\") {\n      paivitaPaikatMaakunnassa();\n    }\n  };\n\n  // Luo ja palauttaa maakunnat -dropvalikon\n  const luoMaakuntaValikko = () => {\n    let selectBox = document.getElementById(\"inputMaakunnat\");\n    const options = Object.values(maakunnat).map((maakunta, index) => (\n      <p\n        key={index}\n        className=\"valinnat\"\n        onClick={(e) => {\n          selectBox.value = e.target.innerHTML;\n          setValittuMaakunta(e.target.innerHTML);\n          selectBox.focus();\n          setToggleMaakunnatClick(false);\n        }}\n      >\n        {maakunta}\n      </p>\n    ));\n\n    return (\n      <animated.div\n        style={maakunnatFade}\n        id={\"maakunnatContainer\"}\n        className=\"options\"\n      >\n        {options}\n      </animated.div>\n    );\n  };\n\n  // Luo ja palauttaa tyypit -dropvalikon\n  const luoTyypitValikko = () => {\n    let selectBox = document.getElementById(\"inputTyypit\");\n    const options = Object.values(tyypit).map((tyyppi, index) => (\n      <p\n        key={index}\n        className=\"valinnat\"\n        onClick={(e) => {\n          selectBox.value = e.target.innerHTML;\n          setValittuTyyppi(e.target.innerHTML);\n          selectBox.focus();\n          setToggleTyypitClick(false);\n        }}\n      >\n        {tyyppi}\n      </p>\n    ));\n\n    return (\n      <animated.div\n        style={tyypitFade}\n        id={\"tyypitContainer\"}\n        className=\"options\"\n      >\n        {options}\n      </animated.div>\n    );\n  };\n\n  // Palauttaa ohjelman\n  return (\n    <div className=\"app-container\">\n      {!isLoading ? (\n        <div>\n          <input\n            id={\"inputMaakunnat\"}\n            type={\"text\"}\n            value={valittuMaakunta}\n            onClick={() => /* naytaMaakunnat() */ {\n              /* setNaytaMaakuntaValikko(true); */\n              setToggleMaakunnatClick(!toggleMaakunnatClick);\n            }}\n            placeholder={\"Valitse maakunta\"}\n            readOnly\n          ></input>\n          {luoMaakuntaValikko()}\n\n          <input\n            id={\"inputTyypit\"}\n            inputMode={\"text\"}\n            value={valittuTyyppi}\n            onClick={() => {\n              setToggleTyypitClick(!toggleTyypitClick);\n            }}\n            placeholder={\"Valitse tyyppi\"}\n            readOnly\n          ></input>\n\n          {luoTyypitValikko()}\n\n          {maakunnat.length > 0 &&\n            tyypit.length > 0 &&\n            paikat &&\n            rajatutPaikat && (\n              <div className=\"map-chart-wrapper\">\n                <Map\n                  className=\"map\"\n                  maakunta={valittuMaakunta}\n                  tyyppi={valittuTyyppi}\n                  kaikkiPaikat={[...paikatMaakunnassa]}\n                  rajatutPaikat={[...rajatutPaikat]}\n                  newLat={newLat}\n                  newLong={newLong}\n                ></Map>\n                <div className=\"chart-wrapper\">\n                  <BarChart\n                    tyypit={[...tyypit]}\n                    paikatMaakunnassa={chartData}\n                    rajatutPaikat={rajatutPaikat}\n                  ></BarChart>\n\n                  <PieChart\n                    paikat={[...tyypit]}\n                    paikatMaakunnassa={chartData}\n                  ></PieChart>\n                </div>\n              </div>\n            )}\n        </div>\n      ) : (\n        <div\n          style={{\n            position: \"relative\",\n            top: 300,\n            color: \"white\",\n            fontSize: \"30px\",\n            textAlign: \"center\",\n          }}\n        >\n          <BeatLoader size={50} color=\"white\" loading></BeatLoader>\n          <br />\n          Loading...\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\Map.js",["40"],"C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\BarChart.js",["41"],"import React, { useState, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\n// Barchart komponentti\r\nfunction BarChart(props) {\r\n  const [tyypit, setTyypit] = useState(props.tyypit);\r\n  const [tyyppimaarat, setTyyppimaarat] = useState([]);\r\n\r\n  useEffect(() => {\r\n    laskeMaarat();\r\n  }, [props.paikatMaakunnassa]);\r\n\r\n  useEffect(() => {\r\n    setTyypit(poistaNaytaKaikkiVaihtoehto(props.tyypit));\r\n  }, [props.tyypit]);\r\n\r\n  const poistaNaytaKaikkiVaihtoehto = (arr) => {\r\n    // Poistaa \"'Näytä kaikki' -vaihdoehdon\" listasta\r\n    arr.shift();\r\n    return arr;\r\n  };\r\n\r\n  // Laskee kaikkien paikkojen määrät BarChartiin\r\n  const laskeMaarat = () => {\r\n    let laavut = 0;\r\n    let kodat = 0;\r\n    let paivatuvat = 0;\r\n    let nuotiopaikat = 0;\r\n    let luolat = 0;\r\n    let auotiotuvat = 0;\r\n    let ruokailukatokset = 0;\r\n    let nahtavyydet = 0;\r\n    let lintutornit = 0;\r\n    let varaustuvat = 0;\r\n    let kammit = 0;\r\n    let porokampat = 0;\r\n    let lahteet = 0;\r\n    let maarat = [];\r\n\r\n    async function f() {\r\n      for (let paikka of props.paikatMaakunnassa[0]) {\r\n        switch (paikka.tyyppi) {\r\n          case \"Laavu\":\r\n            laavut++;\r\n            break;\r\n          case \"Kota\":\r\n            kodat++;\r\n            break;\r\n          case \"Päivätupa\":\r\n            paivatuvat++;\r\n            break;\r\n          case \"Nuotiopaikka\":\r\n            nuotiopaikat++;\r\n            break;\r\n          case \"Luola\":\r\n            luolat++;\r\n            break;\r\n          case \"Autiotupa\":\r\n            auotiotuvat++;\r\n            break;\r\n          case \"Ruokailukatos\":\r\n            ruokailukatokset++;\r\n            break;\r\n          case \"Nähtävyys\":\r\n            nahtavyydet++;\r\n            break;\r\n          case \"Lintutorni\":\r\n            lintutornit++;\r\n            break;\r\n          case \"Varaustupa\":\r\n            varaustuvat++;\r\n            break;\r\n          case \"Kammi\":\r\n            kammit++;\r\n            break;\r\n          case \"Porokämppä\":\r\n            porokampat++;\r\n            break;\r\n          case \"Lähde\":\r\n            lahteet++;\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    f().then(() => {\r\n      maarat = [\r\n        laavut,\r\n        kodat,\r\n        paivatuvat,\r\n        nuotiopaikat,\r\n        luolat,\r\n        auotiotuvat,\r\n        ruokailukatokset,\r\n        nahtavyydet,\r\n        lintutornit,\r\n        varaustuvat,\r\n        kammit,\r\n        porokampat,\r\n        lahteet,\r\n      ];\r\n      setTyyppimaarat(maarat);\r\n    });\r\n  };\r\n\r\n  // Palauttaa kaavion\r\n  return (\r\n    <div className=\"charts-wrapper\">\r\n      <div className=\"barchart-wrapper\">\r\n        <Bar\r\n          data={{\r\n            labels: [...tyypit],\r\n            datasets: [\r\n              {\r\n                label: \"Paikkoja yhteensä\",\r\n                data: [...tyyppimaarat],\r\n                backgroundColor: [\r\n                  \"rgba(255, 0, 0, 0.8)\",\r\n                  \"rgba(255, 50, 0, 0.8)\",\r\n                  \"rgba(255, 100, 0, 0.8)\",\r\n                  \"rgba(255, 150, 0, 0.8)\",\r\n                  \"rgba(255, 200, 0, 0.8)\",\r\n                  \"rgba(255, 250, 0, 0.8)\",\r\n                  \"rgba(200, 255, 0, 0.8)\",\r\n                  \"rgba(150, 255, 0, 0.8)\",\r\n                  \"rgba(100, 255, 0, 0.8)\",\r\n                  \"rgba(50, 255, 0, 0.8)\",\r\n                  \"rgba(0, 255, 0, 0.8)\",\r\n                  \"rgba(0, 255, 50, 0.8)\",\r\n                  \"rgba(0, 255, 100, 0.8)\",\r\n                ],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            animation: {\r\n              duration: 0,\r\n            },\r\n          }}\r\n        ></Bar>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BarChart;\r\n","C:\\Users\\sauli\\OneDrive\\Työpöytä\\JAMK\\retkisofta\\retkiohjelma\\src\\PieChart.js",["42"],"import React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nfunction PieChart(props) {\r\n  const [tyypit, setTyypit] = useState(props.paikat);\r\n  const [prosentit, setProsentit] = useState([]);\r\n  const [render, setRender] = useState(false);\r\n\r\n  // Päivittää tyypit\r\n  useEffect(() => {\r\n    setTyypit(poistaNaytaKaikkiVaihtoehto(props.paikat));\r\n    laskeMaarat();\r\n    setRender(true);\r\n  }, [props.paikatMaakunnassa]);\r\n\r\n  // Laskee paikkojen määrät\r\n  const laskeMaarat = () => {\r\n    let laavut = 0;\r\n    let kodat = 0;\r\n    let paivatuvat = 0;\r\n    let nuotiopaikat = 0;\r\n    let luolat = 0;\r\n    let auotiotuvat = 0;\r\n    let ruokailukatokset = 0;\r\n    let nahtavyydet = 0;\r\n    let lintutornit = 0;\r\n    let varaustuvat = 0;\r\n    let kammit = 0;\r\n    let porokampat = 0;\r\n    let lahteet = 0;\r\n    let maarat = [];\r\n\r\n    async function f() {\r\n      for (let paikka of props.paikatMaakunnassa[0]) {\r\n        switch (paikka.tyyppi) {\r\n          case \"Laavu\":\r\n            laavut++;\r\n            break;\r\n          case \"Kota\":\r\n            kodat++;\r\n            break;\r\n          case \"Päivätupa\":\r\n            paivatuvat++;\r\n            break;\r\n          case \"Nuotiopaikka\":\r\n            nuotiopaikat++;\r\n            break;\r\n          case \"Luola\":\r\n            luolat++;\r\n            break;\r\n          case \"Autiotupa\":\r\n            auotiotuvat++;\r\n            break;\r\n          case \"Ruokailukatos\":\r\n            ruokailukatokset++;\r\n            break;\r\n          case \"Nähtävyys\":\r\n            nahtavyydet++;\r\n            break;\r\n          case \"Lintutorni\":\r\n            lintutornit++;\r\n            break;\r\n          case \"Varaustupa\":\r\n            varaustuvat++;\r\n            break;\r\n          case \"Kammi\":\r\n            kammit++;\r\n            break;\r\n          case \"Porokämppä\":\r\n            porokampat++;\r\n            break;\r\n          case \"Lähde\":\r\n            lahteet++;\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    f().then(() => {\r\n      maarat = [\r\n        laavut,\r\n        kodat,\r\n        paivatuvat,\r\n        nuotiopaikat,\r\n        luolat,\r\n        auotiotuvat,\r\n        ruokailukatokset,\r\n        nahtavyydet,\r\n        lintutornit,\r\n        varaustuvat,\r\n        kammit,\r\n        porokampat,\r\n        lahteet,\r\n      ];\r\n      laskeProsentit(maarat);\r\n    });\r\n  };\r\n\r\n  // Poistaa 'Näytä kaikki' -vaihtoehdon listasta\r\n  const poistaNaytaKaikkiVaihtoehto = (arr) => {\r\n    arr.shift();\r\n    return arr;\r\n  };\r\n\r\n  // Laskee prosenttiosuudet paikoista\r\n  const laskeProsentit = (maarat) => {\r\n    const paikkoja = props.paikatMaakunnassa[0].length;\r\n    let pros = [];\r\n    async function f() {\r\n      pros = maarat.map((maara) => ((maara / paikkoja) * 100).toFixed());\r\n    }\r\n\r\n    f().then(() => {\r\n      let listassaOnDataa = false;\r\n      for (let m of maarat) {\r\n        if (m > 0) {\r\n          listassaOnDataa = true;\r\n        }\r\n      }\r\n\r\n      if (listassaOnDataa) {\r\n        setProsentit(pros);\r\n      } else {\r\n        setProsentit([100]);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Palauttaa kaavion\r\n  return (\r\n    render && (\r\n      <div className=\"piechart-wrapper\">\r\n        <h2>Prosenttia paikoista</h2>\r\n        <Pie\r\n          data={{\r\n            labels: [...tyypit],\r\n            datasets: [\r\n              {\r\n                label: \"Prosenttia paikoista\",\r\n                data: [...prosentit],\r\n                backgroundColor: [\r\n                  \"rgba(255, 0, 0, 0.8)\",\r\n                  \"rgba(255, 100, 0, 0.8)\",\r\n                  \"rgba(255, 200, 0, 0.8)\",\r\n                  \"rgba(200, 255, 0, 0.8)\",\r\n                  \"rgba(100, 255, 0, 0.8)\",\r\n                  \"rgba(0, 255, 0, 0.8)\",\r\n                  \"rgba(0, 255, 100, 0.8)\",\r\n                  \"rgba(0, 255, 200, 0.8)\",\r\n                  \"rgba(0, 200, 255, 0.8)\",\r\n                  \"rgba(0, 100, 255, 0.8)\",\r\n                  \"rgba(0, 0, 255, 0.8)\",\r\n                  \"rgba(100, 0, 255, 0.8)\",\r\n                  \"rgba(100, 150, 255, 0.8)\",\r\n                ],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            animation: {\r\n              duration: 0,\r\n            },\r\n          }}\r\n        ></Pie>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default PieChart;\r\n",{"ruleId":"43","severity":1,"message":"44","line":78,"column":6,"nodeType":"45","endLine":78,"endColumn":23,"suggestions":"46"},{"ruleId":"43","severity":1,"message":"47","line":83,"column":6,"nodeType":"45","endLine":83,"endColumn":21,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":88,"column":35,"nodeType":"51","messageId":"52","endLine":88,"endColumn":37},{"ruleId":"49","severity":1,"message":"50","line":98,"column":23,"nodeType":"51","messageId":"52","endLine":98,"endColumn":25},{"ruleId":"49","severity":1,"message":"50","line":98,"column":58,"nodeType":"51","messageId":"52","endLine":98,"endColumn":60},{"ruleId":"49","severity":1,"message":"50","line":100,"column":37,"nodeType":"51","messageId":"52","endLine":100,"endColumn":39},{"ruleId":"49","severity":1,"message":"50","line":106,"column":27,"nodeType":"51","messageId":"52","endLine":106,"endColumn":29},{"ruleId":"49","severity":1,"message":"50","line":106,"column":63,"nodeType":"51","messageId":"52","endLine":106,"endColumn":65},{"ruleId":"49","severity":1,"message":"53","line":112,"column":25,"nodeType":"51","messageId":"52","endLine":112,"endColumn":27},{"ruleId":"49","severity":1,"message":"53","line":121,"column":25,"nodeType":"51","messageId":"52","endLine":121,"endColumn":27},{"ruleId":"49","severity":1,"message":"53","line":121,"column":48,"nodeType":"51","messageId":"52","endLine":121,"endColumn":50},{"ruleId":"54","severity":1,"message":"55","line":124,"column":9,"nodeType":"56","messageId":"57","endLine":130,"endColumn":10},{"ruleId":"49","severity":1,"message":"50","line":127,"column":31,"nodeType":"51","messageId":"52","endLine":127,"endColumn":33},{"ruleId":"49","severity":1,"message":"50","line":128,"column":29,"nodeType":"51","messageId":"52","endLine":128,"endColumn":31},{"ruleId":"49","severity":1,"message":"50","line":133,"column":30,"nodeType":"51","messageId":"52","endLine":133,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":101,"column":17,"nodeType":"60","endLine":101,"endColumn":74},{"ruleId":"43","severity":1,"message":"61","line":11,"column":6,"nodeType":"45","endLine":11,"endColumn":31,"suggestions":"62"},{"ruleId":"43","severity":1,"message":"63","line":14,"column":6,"nodeType":"45","endLine":14,"endColumn":31,"suggestions":"64"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'paivitaChartData' and 'paivitaPaikatMaakunnassa'. Either include them or remove the dependency array.","ArrayExpression",["65"],"React Hook useEffect has a missing dependency: 'paivitaPaikat'. Either include it or remove the dependency array.",["66"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'laskeMaarat'. Either include it or remove the dependency array.",["67"],"React Hook useEffect has missing dependencies: 'laskeMaarat' and 'props.paikat'. Either include them or remove the dependency array. If 'setTyypit' needs the current value of 'props.paikat', you can also switch to useReducer instead of useState and read 'props.paikat' in the reducer.",["68"],{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [paivitaChartData, paivitaPaikatMaakunnassa, valittuMaakunta]",{"range":"77","text":"78"},"Update the dependencies array to be: [paivitaPaikat, valittuTyyppi]",{"range":"79","text":"80"},"Update the dependencies array to be: [laskeMaarat, props.paikatMaakunnassa]",{"range":"81","text":"82"},"Update the dependencies array to be: [laskeMaarat, props.paikat, props.paikatMaakunnassa]",{"range":"83","text":"84"},[2514,2531],"[paivitaChartData, paivitaPaikatMaakunnassa, valittuMaakunta]",[2632,2647],"[paivitaPaikat, valittuTyyppi]",[308,333],"[laskeMaarat, props.paikatMaakunnassa]",[429,454],"[laskeMaarat, props.paikat, props.paikatMaakunnassa]"]