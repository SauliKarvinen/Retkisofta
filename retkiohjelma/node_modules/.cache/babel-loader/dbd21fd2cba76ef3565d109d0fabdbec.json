{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sauli\\\\OneDrive\\\\Ty\\xF6p\\xF6yt\\xE4\\\\JAMK\\\\retkisofta\\\\retkiohjelma\\\\src\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ReactMapGl, { Marker, Popup } from \"react-map-gl\";\nimport icon from \"./red_pin.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst access_token = \"pk.eyJ1Ijoic2F1bGlrIiwiYSI6ImNrcWM4NXJoYzAwdzkybm56djVka2VzZW0ifQ.QmYDZh6DNEwu5ITY9lQ6Ag\";\n\nfunction Map(props) {\n  _s();\n\n  const [viewport, setViewport] = useState({\n    latitude: 62,\n    longitude: 25,\n    zoom: 5,\n    transitionDuaration: 3000\n  });\n  const [paikat, setPaikat] = useState(props.rajatutPaikat);\n  const [valittuMarker, setValittuMarker] = useState();\n  const prevLat = useRef(props.newLat);\n  const prevLong = useRef(props.newLong);\n  const [lat, setLat] = useState();\n  const [long, setLong] = useState();\n  useEffect(() => {\n    setPaikat(props.rajatutPaikat);\n  }, [props.rajatutPaikat]);\n  useEffect(() => {\n    if (props.newLat && props.newLong) {\n      setViewport({ ...viewport,\n        latitude: parseFloat(props.newLat),\n        longitude: parseFloat(props.newLong)\n      });\n    }\n  }, [props.newLat]);\n  return /*#__PURE__*/_jsxDEV(ReactMapGl, {\n    className: \"map\",\n    ...viewport,\n    mapboxApiAccessToken: access_token,\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n    height: 800,\n    width: 800,\n    onViewportChange: viewport => {\n      setViewport(viewport);\n    },\n    children: [paikat.length > 0 && paikat[0].map((paikka, index) => {\n      let koord = paikka.koordinaatti.split(\",\");\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        className: \"markers\",\n        latitude: parseFloat(koord[0]),\n        longitude: parseFloat(koord[1]),\n        offsetLeft: -25 / 2,\n        offsetTop: -25 / 2,\n        onClick: () => {\n          setValittuMarker(paikka);\n          let koordinaatit = paikka.koordinaatti.split(\",\");\n          setLat(parseFloat(koordinaatit[0]));\n          setLong(parseFloat(koordinaatit[1]));\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"marker-images\",\n          src: icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this);\n    }), valittuMarker && lat && long && /*#__PURE__*/_jsxDEV(Popup, {\n      latitude: lat,\n      longitude: long,\n      anchor: \"bottom\",\n      offsetTop: -25 / 2,\n      onClose: () => setValittuMarker(null),\n      children: \"mit\\xE4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"LUwSG+X45LO6MDHGX5maSLleeoQ=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["C:/Users/sauli/OneDrive/Työpöytä/JAMK/retkisofta/retkiohjelma/src/Map.js"],"names":["React","useState","useEffect","useRef","ReactMapGl","Marker","Popup","icon","access_token","Map","props","viewport","setViewport","latitude","longitude","zoom","transitionDuaration","paikat","setPaikat","rajatutPaikat","valittuMarker","setValittuMarker","prevLat","newLat","prevLong","newLong","lat","setLat","long","setLong","parseFloat","length","map","paikka","index","koord","koordinaatti","split","koordinaatit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport ReactMapGl, { Marker, Popup } from \"react-map-gl\";\r\nimport icon from \"./red_pin.png\";\r\nconst access_token =\r\n  \"pk.eyJ1Ijoic2F1bGlrIiwiYSI6ImNrcWM4NXJoYzAwdzkybm56djVka2VzZW0ifQ.QmYDZh6DNEwu5ITY9lQ6Ag\";\r\n\r\nfunction Map(props) {\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 62,\r\n    longitude: 25,\r\n    zoom: 5,\r\n    transitionDuaration: 3000,\r\n  });\r\n\r\n  const [paikat, setPaikat] = useState(props.rajatutPaikat);\r\n  const [valittuMarker, setValittuMarker] = useState();\r\n  const prevLat = useRef(props.newLat);\r\n  const prevLong = useRef(props.newLong);\r\n  const [lat, setLat] = useState();\r\n  const [long, setLong] = useState();\r\n\r\n  useEffect(() => {\r\n    setPaikat(props.rajatutPaikat);\r\n  }, [props.rajatutPaikat]);\r\n\r\n  useEffect(() => {\r\n    if (props.newLat && props.newLong) {\r\n      setViewport({\r\n        ...viewport,\r\n        latitude: parseFloat(props.newLat),\r\n        longitude: parseFloat(props.newLong),\r\n      });\r\n    }\r\n  }, [props.newLat]);\r\n\r\n  return (\r\n    <ReactMapGl\r\n      className=\"map\"\r\n      {...viewport}\r\n      mapboxApiAccessToken={access_token}\r\n      mapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n      height={800}\r\n      width={800}\r\n      onViewportChange={(viewport) => {\r\n        setViewport(viewport);\r\n      }}\r\n    >\r\n      {paikat.length > 0 &&\r\n        paikat[0].map((paikka, index) => {\r\n          let koord = paikka.koordinaatti.split(\",\");\r\n          return (\r\n            <Marker\r\n              key={index}\r\n              className=\"markers\"\r\n              latitude={parseFloat(koord[0])}\r\n              longitude={parseFloat(koord[1])}\r\n              offsetLeft={-25 / 2}\r\n              offsetTop={-25 / 2}\r\n              onClick={() => {\r\n                setValittuMarker(paikka);\r\n                let koordinaatit = paikka.koordinaatti.split(\",\");\r\n                setLat(parseFloat(koordinaatit[0]));\r\n                setLong(parseFloat(koordinaatit[1]));\r\n              }}\r\n            >\r\n              <img className=\"marker-images\" src={icon}></img>\r\n            </Marker>\r\n          );\r\n        })}\r\n\r\n      {valittuMarker && lat && long && (\r\n        <Popup\r\n          latitude={lat}\r\n          longitude={long}\r\n          anchor=\"bottom\"\r\n          offsetTop={-25 / 2}\r\n          onClose={() => setValittuMarker(null)}\r\n        >\r\n          mitä\r\n        </Popup>\r\n      )}\r\n    </ReactMapGl>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}