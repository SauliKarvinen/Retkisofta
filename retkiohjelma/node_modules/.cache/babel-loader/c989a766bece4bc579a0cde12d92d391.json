{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sauli\\\\OneDrive\\\\Ty\\xF6p\\xF6yt\\xE4\\\\JAMK\\\\retkisofta\\\\retkiohjelma\\\\src\\\\PieChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PieChart(props) {\n  _s();\n\n  const [tyypit, setTyypit] = useState(props.paikat);\n  const [paikat, setPaikat] = useState(props.paikatMaakunnassa);\n  const [prosentit, setProsentit] = useState([]);\n  const [maakunta, setMaakunta] = useState(props.maakunta);\n  const [render, setRender] = useState(false);\n  useEffect(() => {\n    console.log(\"PIECHART KAIKKI PAIKAT\", props.paikatMaakunnassa);\n    setTyypit(poistaNaytaKaikkiVaihtoehto(props.paikat));\n    setPaikat(props.paikatMaakunnassa);\n    laskeMaarat();\n    setRender(true);\n  }, [props.maakunta, props.paikatMaakunnassa]);\n\n  const laskeMaarat = () => {\n    let laavut = 0;\n    let kodat = 0;\n    let paivatuvat = 0;\n    let nuotiopaikat = 0;\n    let luolat = 0;\n    let auotiotuvat = 0;\n    let ruokailukatokset = 0;\n    let nahtavyydet = 0;\n    let lintutornit = 0;\n    let varaustuvat = 0;\n    let kammit = 0;\n    let porokampat = 0;\n    let lahteet = 0;\n    let maarat = [];\n\n    async function f() {\n      console.log(\"TULOSTA ARRAY:\", props.paikatMaakunnassa);\n\n      for (let paikka of props.paikatMaakunnassa) {\n        switch (paikka.tyyppi) {\n          case \"Laavu\":\n            laavut++;\n            break;\n\n          case \"Kota\":\n            kodat++;\n            break;\n\n          case \"Päivätupa\":\n            paivatuvat++;\n            break;\n\n          case \"Nuotiopaikka\":\n            nuotiopaikat++;\n            break;\n\n          case \"Luola\":\n            luolat++;\n            break;\n\n          case \"Autiotupa\":\n            auotiotuvat++;\n            break;\n\n          case \"Ruokailukatos\":\n            ruokailukatokset++;\n            break;\n\n          case \"Nähtävyys\":\n            nahtavyydet++;\n            break;\n\n          case \"Lintutorni\":\n            lintutornit++;\n            break;\n\n          case \"Varaustupa\":\n            varaustuvat++;\n            break;\n\n          case \"Kammi\":\n            kammit++;\n            break;\n\n          case \"Porokämppä\":\n            porokampat++;\n            break;\n\n          case \"Lähde\":\n            lahteet++;\n            break;\n\n          default:\n            break;\n        }\n      }\n    }\n\n    f().then(() => {\n      maarat = [laavut, kodat, paivatuvat, nuotiopaikat, luolat, auotiotuvat, ruokailukatokset, nahtavyydet, lintutornit, varaustuvat, kammit, porokampat, lahteet]; //setTyyppimaarat(maarat);\n\n      laskeProsentit(maarat);\n    });\n  };\n\n  const poistaNaytaKaikkiVaihtoehto = arr => {\n    arr.shift();\n    return arr;\n  };\n\n  const laskeProsentit = maarat => {\n    const paikkoja = props.paikatMaakunnassa.length;\n    let pros = [];\n\n    async function f() {\n      pros = maarat.map(maara => (maara / paikkoja * 100).toFixed());\n    }\n\n    f().then(() => {\n      let listassaOnDataa = false;\n\n      for (let m of maarat) {\n        if (m > 0) {\n          listassaOnDataa = true;\n        }\n      }\n\n      if (listassaOnDataa) {\n        setProsentit(pros);\n      } else {\n        setProsentit([100]);\n      }\n    });\n  };\n\n  return render && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"piechart-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(Pie, {\n      data: {\n        options: {\n          animations: false,\n          animation: {\n            duration: 0\n          }\n        },\n        labels: [...tyypit],\n        datasets: [{\n          label: \"test\",\n          data: [...prosentit],\n          backgroundColor: [\"rgba(255, 0, 0, 0.8)\", \"rgba(255, 100, 0, 0.8)\", \"rgba(255, 200, 0, 0.8)\", \"rgba(200, 255, 0, 0.8)\", \"rgba(100, 255, 0, 0.8)\", \"rgba(0, 255, 0, 0.8)\", \"rgba(0, 255, 100, 0.8)\", \"rgba(0, 255, 200, 0.8)\", \"rgba(0, 200, 255, 0.8)\", \"rgba(0, 100, 255, 0.8)\", \"rgba(0, 0, 255, 0.8)\", \"rgba(100, 0, 255, 0.8)\", \"rgba(100, 150, 255, 0.8)\"]\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PieChart, \"PxhQtugp3gYCMx6autaFInHWkgA=\");\n\n_c = PieChart;\nexport default PieChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PieChart\");","map":{"version":3,"sources":["C:/Users/sauli/OneDrive/Työpöytä/JAMK/retkisofta/retkiohjelma/src/PieChart.js"],"names":["React","useState","useEffect","Pie","PieChart","props","tyypit","setTyypit","paikat","setPaikat","paikatMaakunnassa","prosentit","setProsentit","maakunta","setMaakunta","render","setRender","console","log","poistaNaytaKaikkiVaihtoehto","laskeMaarat","laavut","kodat","paivatuvat","nuotiopaikat","luolat","auotiotuvat","ruokailukatokset","nahtavyydet","lintutornit","varaustuvat","kammit","porokampat","lahteet","maarat","f","paikka","tyyppi","then","laskeProsentit","arr","shift","paikkoja","length","pros","map","maara","toFixed","listassaOnDataa","m","options","animations","animation","duration","labels","datasets","label","data","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nfunction PieChart(props) {\r\n  const [tyypit, setTyypit] = useState(props.paikat);\r\n  const [paikat, setPaikat] = useState(props.paikatMaakunnassa);\r\n  const [prosentit, setProsentit] = useState([]);\r\n  const [maakunta, setMaakunta] = useState(props.maakunta);\r\n  const [render, setRender] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(\"PIECHART KAIKKI PAIKAT\", props.paikatMaakunnassa);\r\n    setTyypit(poistaNaytaKaikkiVaihtoehto(props.paikat));\r\n    setPaikat(props.paikatMaakunnassa);\r\n    laskeMaarat();\r\n    setRender(true);\r\n  }, [props.maakunta, props.paikatMaakunnassa]);\r\n\r\n  const laskeMaarat = () => {\r\n    let laavut = 0;\r\n    let kodat = 0;\r\n    let paivatuvat = 0;\r\n    let nuotiopaikat = 0;\r\n    let luolat = 0;\r\n    let auotiotuvat = 0;\r\n    let ruokailukatokset = 0;\r\n    let nahtavyydet = 0;\r\n    let lintutornit = 0;\r\n    let varaustuvat = 0;\r\n    let kammit = 0;\r\n    let porokampat = 0;\r\n    let lahteet = 0;\r\n    let maarat = [];\r\n\r\n    async function f() {\r\n      console.log(\"TULOSTA ARRAY:\", props.paikatMaakunnassa);\r\n      for (let paikka of props.paikatMaakunnassa) {\r\n        switch (paikka.tyyppi) {\r\n          case \"Laavu\":\r\n            laavut++;\r\n            break;\r\n          case \"Kota\":\r\n            kodat++;\r\n            break;\r\n          case \"Päivätupa\":\r\n            paivatuvat++;\r\n            break;\r\n          case \"Nuotiopaikka\":\r\n            nuotiopaikat++;\r\n            break;\r\n          case \"Luola\":\r\n            luolat++;\r\n            break;\r\n          case \"Autiotupa\":\r\n            auotiotuvat++;\r\n            break;\r\n          case \"Ruokailukatos\":\r\n            ruokailukatokset++;\r\n            break;\r\n          case \"Nähtävyys\":\r\n            nahtavyydet++;\r\n            break;\r\n          case \"Lintutorni\":\r\n            lintutornit++;\r\n            break;\r\n          case \"Varaustupa\":\r\n            varaustuvat++;\r\n            break;\r\n          case \"Kammi\":\r\n            kammit++;\r\n            break;\r\n          case \"Porokämppä\":\r\n            porokampat++;\r\n            break;\r\n          case \"Lähde\":\r\n            lahteet++;\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    f().then(() => {\r\n      maarat = [\r\n        laavut,\r\n        kodat,\r\n        paivatuvat,\r\n        nuotiopaikat,\r\n        luolat,\r\n        auotiotuvat,\r\n        ruokailukatokset,\r\n        nahtavyydet,\r\n        lintutornit,\r\n        varaustuvat,\r\n        kammit,\r\n        porokampat,\r\n        lahteet,\r\n      ];\r\n      //setTyyppimaarat(maarat);\r\n      laskeProsentit(maarat);\r\n    });\r\n  };\r\n\r\n  const poistaNaytaKaikkiVaihtoehto = (arr) => {\r\n    arr.shift();\r\n    return arr;\r\n  };\r\n\r\n  const laskeProsentit = (maarat) => {\r\n    const paikkoja = props.paikatMaakunnassa.length;\r\n    let pros = [];\r\n    async function f() {\r\n      pros = maarat.map((maara) => ((maara / paikkoja) * 100).toFixed());\r\n    }\r\n\r\n    f().then(() => {\r\n      let listassaOnDataa = false;\r\n      for (let m of maarat) {\r\n        if (m > 0) {\r\n          listassaOnDataa = true;\r\n        }\r\n      }\r\n\r\n      if (listassaOnDataa) {\r\n        setProsentit(pros);\r\n      } else {\r\n        setProsentit([100]);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    render && (\r\n      <div className=\"piechart-wrapper\">\r\n        <Pie\r\n          data={{\r\n            options: {\r\n              animations: false,\r\n              animation: {\r\n                duration: 0,\r\n              },\r\n            },\r\n            labels: [...tyypit],\r\n            datasets: [\r\n              {\r\n                label: \"test\",\r\n                data: [...prosentit],\r\n                backgroundColor: [\r\n                  \"rgba(255, 0, 0, 0.8)\",\r\n                  \"rgba(255, 100, 0, 0.8)\",\r\n                  \"rgba(255, 200, 0, 0.8)\",\r\n                  \"rgba(200, 255, 0, 0.8)\",\r\n                  \"rgba(100, 255, 0, 0.8)\",\r\n                  \"rgba(0, 255, 0, 0.8)\",\r\n                  \"rgba(0, 255, 100, 0.8)\",\r\n                  \"rgba(0, 255, 200, 0.8)\",\r\n                  \"rgba(0, 200, 255, 0.8)\",\r\n                  \"rgba(0, 100, 255, 0.8)\",\r\n                  \"rgba(0, 0, 255, 0.8)\",\r\n                  \"rgba(100, 0, 255, 0.8)\",\r\n                  \"rgba(100, 150, 255, 0.8)\",\r\n                ],\r\n              },\r\n            ],\r\n          }}\r\n        ></Pie>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default PieChart;\r\n"]},"metadata":{},"sourceType":"module"}