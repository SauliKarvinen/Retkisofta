{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sauli\\\\OneDrive\\\\Ty\\xF6p\\xF6yt\\xE4\\\\JAMK\\\\retkisofta\\\\retkiohjelma\\\\src\\\\BarChart.js\",\n    _s = $RefreshSig$();\n\nimport { _adapters } from \"chart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Pie } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BarChart(props) {\n  _s();\n\n  const [tyypit, setTyypit] = useState(props.tyypit);\n  const [paikatMaakunnassa, setPaikatMaakunnassa] = useState(props.paikatMaakunnassa);\n  const [tyyppimaarat, setTyyppimaarat] = useState([]);\n  const [prosentit, setProsentit] = useState([]);\n  useEffect(() => {\n    setTyypit(props.tyypit);\n  }, [props.tyypit]);\n  useEffect(() => {\n    setPaikatMaakunnassa(props.paikatMaakunnassa);\n    laskeMaarat();\n  }, [props.paikatMaakunnassa]);\n  /* const laskeMaarat = () => {\r\n    let laavut = 0;\r\n    let kodat = 0;\r\n    let paivatuvat = 0;\r\n    let nuotiopaikat = 0;\r\n    let luolat = 0;\r\n    let auotiotuvat = 0;\r\n    let ruokailukatokset = 0;\r\n    let nahtavyydet = 0;\r\n    let lintutornit = 0;\r\n    let varaustuvat = 0;\r\n    let kammit = 0;\r\n    let porokampat = 0;\r\n    let lahteet = 0;\r\n    let maarat = [];\r\n      async function f() {\r\n      for (let paikka of props.paikatMaakunnassa) {\r\n        switch (paikka.tyyppi) {\r\n          case \"Laavu\":\r\n            laavut++;\r\n            break;\r\n          case \"Kota\":\r\n            kodat++;\r\n            break;\r\n          case \"Päivätupa\":\r\n            paivatuvat++;\r\n            break;\r\n          case \"Nuotiopaikka\":\r\n            nuotiopaikat++;\r\n            break;\r\n          case \"Luola\":\r\n            luolat++;\r\n            break;\r\n          case \"Autiotupa\":\r\n            auotiotuvat++;\r\n            break;\r\n          case \"Ruokailukatos\":\r\n            ruokailukatokset++;\r\n            break;\r\n          case \"Nähtävyys\":\r\n            nahtavyydet++;\r\n            break;\r\n          case \"Lintutorni\":\r\n            lintutornit++;\r\n            break;\r\n          case \"Varaustupa\":\r\n            varaustuvat++;\r\n            break;\r\n          case \"Kammi\":\r\n            kammit++;\r\n            break;\r\n          case \"Porokämppä\":\r\n            porokampat++;\r\n            break;\r\n          case \"Lähde\":\r\n            lahteet++;\r\n            break;\r\n            default:\r\n            break;\r\n        }\r\n      }\r\n    } */\n\n  /* f().then(() => {\r\n      maarat = [\r\n        laavut,\r\n        kodat,\r\n        paivatuvat,\r\n        nuotiopaikat,\r\n        luolat,\r\n        auotiotuvat,\r\n        ruokailukatokset,\r\n        nahtavyydet,\r\n        lintutornit,\r\n        varaustuvat,\r\n        kammit,\r\n        porokampat,\r\n        lahteet,\r\n      ];\r\n      setTyyppimaarat(maarat);\r\n      laskeProsentit(maarat);\r\n    });\r\n  }; */\n\n  /* const laskeProsentit = (maarat) => {\r\n    const paikkoja = props.paikatMaakunnassa.length;\r\n    let pros = [];\r\n    async function f() {\r\n      pros = maarat.map((maara) => ((maara / paikkoja) * 100).toFixed());\r\n    }\r\n      f().then(() => {\r\n      let listassaOnDataa = false;\r\n      for (let m of maarat) {\r\n        if (m > 0) {\r\n          listassaOnDataa = true;\r\n        }\r\n      }\r\n        if (listassaOnDataa) {\r\n        setProsentit(pros);\r\n      } else {\r\n        setProsentit([100]);\r\n      }\r\n    });\r\n  }; */\n\n  console.log(\"prosentit:\", prosentit);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"charts-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"barchart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: {\n          labels: [...tyypit],\n          datasets: [{\n            label: \"test\",\n            data: [...tyyppimaarat],\n            backgroundColor: [\"rgba(255, 0, 0, 0.8)\", \"rgba(255, 50, 0, 0.8)\", \"rgba(255, 100, 0, 0.8)\", \"rgba(255, 150, 0, 0.8)\", \"rgba(255, 200, 0, 0.8)\", \"rgba(255, 250, 0, 0.8)\", \"rgba(200, 255, 0, 0.8)\", \"rgba(150, 255, 0, 0.8)\", \"rgba(100, 255, 0, 0.8)\", \"rgba(50, 255, 0, 0.8)\", \"rgba(0, 255, 0, 0.8)\", \"rgba(0, 255, 50, 0.8)\", \"rgba(0, 255, 100, 0.8)\"]\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BarChart, \"m9e28AKNpKZESDm/VfM1fu3eaZ0=\");\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["C:/Users/sauli/OneDrive/Työpöytä/JAMK/retkisofta/retkiohjelma/src/BarChart.js"],"names":["_adapters","React","useState","useEffect","Bar","Pie","BarChart","props","tyypit","setTyypit","paikatMaakunnassa","setPaikatMaakunnassa","tyyppimaarat","setTyyppimaarat","prosentit","setProsentit","laskeMaarat","console","log","labels","datasets","label","data","backgroundColor"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,UAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,GAAT,QAAoB,iBAApB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACK,KAAK,CAACC,MAAP,CAApC;AACA,QAAM,CAACE,iBAAD,EAAoBC,oBAApB,IAA4CT,QAAQ,CACxDK,KAAK,CAACG,iBADkD,CAA1D;AAGA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,SAAS,CAACF,KAAK,CAACC,MAAP,CAAT;AACD,GAFQ,EAEN,CAACD,KAAK,CAACC,MAAP,CAFM,CAAT;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,oBAAoB,CAACJ,KAAK,CAACG,iBAAP,CAApB;AACAM,IAAAA,WAAW;AACZ,GAHQ,EAGN,CAACT,KAAK,CAACG,iBAAP,CAHM,CAAT;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIEO,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,SAA1B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACE,QAAC,GAAD;AACE,QAAA,IAAI,EAAE;AACJK,UAAAA,MAAM,EAAE,CAAC,GAAGX,MAAJ,CADJ;AAEJY,UAAAA,QAAQ,EAAE,CACR;AACEC,YAAAA,KAAK,EAAE,MADT;AAEEC,YAAAA,IAAI,EAAE,CAAC,GAAGV,YAAJ,CAFR;AAGEW,YAAAA,eAAe,EAAE,CACf,sBADe,EAEf,uBAFe,EAGf,wBAHe,EAIf,wBAJe,EAKf,wBALe,EAMf,wBANe,EAOf,wBAPe,EAQf,wBARe,EASf,wBATe,EAUf,uBAVe,EAWf,sBAXe,EAYf,uBAZe,EAaf,wBAbe;AAHnB,WADQ;AAFN;AADR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GAhKQjB,Q;;KAAAA,Q;AAkKT,eAAeA,QAAf","sourcesContent":["import { _adapters } from \"chart.js\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nfunction BarChart(props) {\r\n  const [tyypit, setTyypit] = useState(props.tyypit);\r\n  const [paikatMaakunnassa, setPaikatMaakunnassa] = useState(\r\n    props.paikatMaakunnassa\r\n  );\r\n  const [tyyppimaarat, setTyyppimaarat] = useState([]);\r\n  const [prosentit, setProsentit] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setTyypit(props.tyypit);\r\n  }, [props.tyypit]);\r\n\r\n  useEffect(() => {\r\n    setPaikatMaakunnassa(props.paikatMaakunnassa);\r\n    laskeMaarat();\r\n  }, [props.paikatMaakunnassa]);\r\n\r\n  /* const laskeMaarat = () => {\r\n    let laavut = 0;\r\n    let kodat = 0;\r\n    let paivatuvat = 0;\r\n    let nuotiopaikat = 0;\r\n    let luolat = 0;\r\n    let auotiotuvat = 0;\r\n    let ruokailukatokset = 0;\r\n    let nahtavyydet = 0;\r\n    let lintutornit = 0;\r\n    let varaustuvat = 0;\r\n    let kammit = 0;\r\n    let porokampat = 0;\r\n    let lahteet = 0;\r\n    let maarat = [];\r\n\r\n    async function f() {\r\n      for (let paikka of props.paikatMaakunnassa) {\r\n        switch (paikka.tyyppi) {\r\n          case \"Laavu\":\r\n            laavut++;\r\n            break;\r\n          case \"Kota\":\r\n            kodat++;\r\n            break;\r\n          case \"Päivätupa\":\r\n            paivatuvat++;\r\n            break;\r\n          case \"Nuotiopaikka\":\r\n            nuotiopaikat++;\r\n            break;\r\n          case \"Luola\":\r\n            luolat++;\r\n            break;\r\n          case \"Autiotupa\":\r\n            auotiotuvat++;\r\n            break;\r\n          case \"Ruokailukatos\":\r\n            ruokailukatokset++;\r\n            break;\r\n          case \"Nähtävyys\":\r\n            nahtavyydet++;\r\n            break;\r\n          case \"Lintutorni\":\r\n            lintutornit++;\r\n            break;\r\n          case \"Varaustupa\":\r\n            varaustuvat++;\r\n            break;\r\n          case \"Kammi\":\r\n            kammit++;\r\n            break;\r\n          case \"Porokämppä\":\r\n            porokampat++;\r\n            break;\r\n          case \"Lähde\":\r\n            lahteet++;\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    } */\r\n\r\n  /* f().then(() => {\r\n      maarat = [\r\n        laavut,\r\n        kodat,\r\n        paivatuvat,\r\n        nuotiopaikat,\r\n        luolat,\r\n        auotiotuvat,\r\n        ruokailukatokset,\r\n        nahtavyydet,\r\n        lintutornit,\r\n        varaustuvat,\r\n        kammit,\r\n        porokampat,\r\n        lahteet,\r\n      ];\r\n      setTyyppimaarat(maarat);\r\n      laskeProsentit(maarat);\r\n    });\r\n  }; */\r\n\r\n  /* const laskeProsentit = (maarat) => {\r\n    const paikkoja = props.paikatMaakunnassa.length;\r\n    let pros = [];\r\n    async function f() {\r\n      pros = maarat.map((maara) => ((maara / paikkoja) * 100).toFixed());\r\n    }\r\n\r\n    f().then(() => {\r\n      let listassaOnDataa = false;\r\n      for (let m of maarat) {\r\n        if (m > 0) {\r\n          listassaOnDataa = true;\r\n        }\r\n      }\r\n\r\n      if (listassaOnDataa) {\r\n        setProsentit(pros);\r\n      } else {\r\n        setProsentit([100]);\r\n      }\r\n    });\r\n  }; */\r\n\r\n  console.log(\"prosentit:\", prosentit);\r\n\r\n  return (\r\n    <div className=\"charts-wrapper\">\r\n      <div className=\"barchart-wrapper\">\r\n        <Bar\r\n          data={{\r\n            labels: [...tyypit],\r\n            datasets: [\r\n              {\r\n                label: \"test\",\r\n                data: [...tyyppimaarat],\r\n                backgroundColor: [\r\n                  \"rgba(255, 0, 0, 0.8)\",\r\n                  \"rgba(255, 50, 0, 0.8)\",\r\n                  \"rgba(255, 100, 0, 0.8)\",\r\n                  \"rgba(255, 150, 0, 0.8)\",\r\n                  \"rgba(255, 200, 0, 0.8)\",\r\n                  \"rgba(255, 250, 0, 0.8)\",\r\n                  \"rgba(200, 255, 0, 0.8)\",\r\n                  \"rgba(150, 255, 0, 0.8)\",\r\n                  \"rgba(100, 255, 0, 0.8)\",\r\n                  \"rgba(50, 255, 0, 0.8)\",\r\n                  \"rgba(0, 255, 0, 0.8)\",\r\n                  \"rgba(0, 255, 50, 0.8)\",\r\n                  \"rgba(0, 255, 100, 0.8)\",\r\n                ],\r\n              },\r\n            ],\r\n          }}\r\n        ></Bar>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BarChart;\r\n"]},"metadata":{},"sourceType":"module"}